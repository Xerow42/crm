from flask import Flask, render_template, request, redirect, flash
import sqlite3
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import csv
from datetime import datetime
from deep_translator import GoogleTranslator
from langdetect import detect
import logging
from config import *
from googletrans import Translator
from transformers import pipeline
from create_db import creer_base_de_donnees

creer_base_de_donnees()
classifier = pipeline("sentiment-analysis")

def analyser_sentiment(texte):
    result = classifier(texte)
    sentiment_label = result[0]['label']
    confidence_score = result[0]['score']

    if sentiment_label == 'NEGATIVE':
        sentiment_label = "üò° N√©gatif"
    elif sentiment_label == 'POSITIVE':
        sentiment_label = "üòä Positif"
    else:
        sentiment_label = "üòê Neutre"

    return sentiment_label, confidence_score

app = Flask(__name__)
app.secret_key = SECRET_KEY
app.logger.setLevel(logging.DEBUG)

def get_db_connection():
    conn = sqlite3.connect(DATABASE) 
    conn.row_factory = sqlite3.Row
    return conn

def envoyer_email(destinataire, sujet, message_admin_original, message_admin_traduit,
                  nom_utilisateur, date_reclamation, message_client_original, langue_client):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_SENDER
    msg['To'] = destinataire
    msg['Subject'] = sujet

    partie_a_traduire = f"""
Bonjour {nom_utilisateur}, üëã

üìÖ Nous avons bien re√ßu votre r√©clamation soumise le {date_reclamation}. 

üìù Voici le message que vous nous avez envoy√© :
¬´ {message_client_original} ¬ª

üåê Et voici notre r√©ponse traduite dans votre langue :
¬´ {message_admin_traduit} ¬ª

üôè Merci pour votre patience et votre compr√©hension.
N‚Äôh√©sitez pas √† nous recontacter si vous avez d‚Äôautres questions ou pr√©occupations.

Cordialement,  
L‚Äô√©quipe FMPS
Translation generated by Googletrans
"""

    bloc_non_traduit = f"""
üõ†Ô∏è Voici notre r√©ponse originale (en fran√ßais) :
¬´ {message_admin_original} ¬ª
"""

    traducteur = Translator()
    partie_traduite = traducteur.translate(partie_a_traduire, dest=langue_client).text

    corps_email = f"{partie_traduite}\n{bloc_non_traduit}\n\n---------------------------\n\nüá´üá∑ Version originale :\n{partie_a_traduire}{bloc_non_traduit}"

    msg.attach(MIMEText(corps_email, 'plain'))

    try:    
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()
        print("‚úÖ E-mail envoy√© √†", destinataire)
    except Exception as e:
        print("‚ùå Erreur lors de l‚Äôenvoi de l‚Äôe-mail :", e)

@app.route('/')
def admin_dashboard():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT r.id, u.nom, r.description, r.description_originale, r.langue_origine, r.sentiment, r.date_reclamation
        FROM reclamations r 
        JOIN utilisateurs u ON r.id_utilisateur = u.id
        ORDER BY r.date_reclamation ASC
    """)
    reclamations = cursor.fetchall()

    cursor.execute("SELECT * FROM utilisateurs")
    utilisateurs = cursor.fetchall()

    conn.close()
    return render_template('dashboard.html', reclamations=reclamations, utilisateurs=utilisateurs)

@app.route('/dev')
def admin_dashboard_dev():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT r.id, u.nom, r.description, r.description_originale, r.langue_origine, r.sentiment, r.date_reclamation,r.compound_score
        FROM reclamations r 
        JOIN utilisateurs u ON r.id_utilisateur = u.id
        ORDER BY r.date_reclamation ASC
    """)
    reclamations = cursor.fetchall()

    cursor.execute("SELECT * FROM utilisateurs")
    utilisateurs = cursor.fetchall()

    conn.close()
    return render_template('dashboard_dev.html', reclamations=reclamations, utilisateurs=utilisateurs)

@app.route('/ajouter_utilisateur', methods=['GET', 'POST'])
def ajouter_utilisateur():
    conn = get_db_connection()
    cursor = conn.cursor()

    if request.method == 'POST':
        nom = request.form['nom']
        email = request.form['email']
        cursor.execute("INSERT INTO utilisateurs (nom, email) VALUES (?, ?)", (nom, email))
        conn.commit()
        flash("Utilisateur ajout√© avec succ√®s.")
        conn.close()
        return redirect('/')

    cursor.execute("SELECT * FROM utilisateurs")
    utilisateurs = cursor.fetchall()
    conn.close()
    return render_template('ajouter_utilisateur.html', utilisateurs=utilisateurs)

@app.route('/ajouter_motif', methods=['GET', 'POST'])
def ajouter_motif():
    conn = get_db_connection()
    cursor = conn.cursor()

    if request.method == 'POST':
        motif = request.form['motif']
        cursor.execute("INSERT INTO motifs_email (nom_motif) VALUES (?)", (motif,))
        conn.commit()
        flash("Motif ajout√© avec succ√®s.")
        conn.close()
        return redirect('/ajouter_motif')

    cursor.execute("SELECT * FROM motifs_email")
    motifs = cursor.fetchall()
    conn.close()
    return render_template('ajouter_motif.html', motifs=motifs)

@app.route('/ajouter_reclamation', methods=['GET', 'POST'])
def ajouter_reclamation():
    conn = get_db_connection()
    cursor = conn.cursor()

    if request.method == 'POST':
        id_utilisateur = request.form['utilisateur']
        id_motif = request.form['motif']
        description_originale = request.form['description_originale']
        description_anglaise=GoogleTranslator(source='auto', target='en').translate(description_originale)

        try:
            langue_detectee = detect(description_originale)
        except:
            langue_detectee = 'fr'

        if langue_detectee != 'fr':
            description_traduite = GoogleTranslator(source='auto', target='fr').translate(description_originale)
        else:
            description_traduite = description_originale

        sentiment,compound_score = analyser_sentiment(description_anglaise)
        

        cursor.execute('''
            INSERT INTO reclamations (id_utilisateur, id_motif, description, date_reclamation, langue_origine, description_originale, sentiment,compound_score)
            VALUES (?, ?, ?, DATE('now'), ?, ?, ?,?)
        ''', (id_utilisateur, id_motif, description_traduite, langue_detectee, description_originale, sentiment,compound_score))

        conn.commit()
        flash("R√©clamation ajout√©e avec succ√®s.")
        conn.close()
        return redirect('/')

    cursor.execute("SELECT * FROM utilisateurs")
    utilisateurs = cursor.fetchall()
    cursor.execute("SELECT * FROM motifs_email")
    motifs = cursor.fetchall()
    conn.close()
    return render_template('ajouter_reclamation.html', utilisateurs=utilisateurs, motifs=motifs)

@app.route('/traiter_reclamation/<int:id_reclamation>', methods=['GET', 'POST'])
def traiter_reclamation(id_reclamation):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT r.*, u.nom, u.email 
        FROM reclamations r
        JOIN utilisateurs u ON r.id_utilisateur = u.id
        WHERE r.id = ?
    """, (id_reclamation,))
    reclamation = cursor.fetchone()

    if not reclamation:
        conn.close()
        return redirect('/')

    if request.method == 'POST':
        message_admin = request.form['message_admin']
        langue_client = reclamation['langue_origine'] or 'fr'

        if langue_client != 'fr':
            message_traduit = GoogleTranslator(source='fr', target=langue_client).translate(message_admin)
        else:
            message_traduit = message_admin

        envoyer_email(
            destinataire=reclamation['email'],
            sujet="R√©ponse √† votre r√©clamation",
            message_admin_original=message_admin,
            message_admin_traduit=message_traduit,
            nom_utilisateur=reclamation['nom'],
            date_reclamation=reclamation['date_reclamation'],
            message_client_original=reclamation['description_originale'],
            langue_client=langue_client
        )

        cursor.execute("DELETE FROM reclamations WHERE id = ?", (id_reclamation,))
        conn.commit()

        flash("R√©clamation trait√©e, e-mail envoy√© et r√©clamation supprim√©e.")
        conn.close()
        return redirect('/')

    conn.close()
    return render_template('traiter_reclamation.html', reclamation=reclamation)


@app.route('/supprimer_reclamation/<int:id_reclamation>', methods=['POST'])
def supprimer_reclamation(id_reclamation):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("DELETE FROM reclamations WHERE id = ?", (id_reclamation,))
    conn.commit()
    conn.close()

    flash("R√©clamation supprim√©e avec succ√®s.")
    return redirect('/')

@app.route('/upload_csv', methods=['GET', 'POST'])
def upload_csv():
    if request.method == 'POST':
        file = request.files['file']
        if file:
            file.save('data.csv')
            importer_csv('data.csv')
            flash("Fichier CSV import√© avec succ√®s.")
            return redirect('/')
    return render_template('upload_csv.html')

def importer_csv(fichier_csv):
    conn = sqlite3.connect('crm.db')
    cursor = conn.cursor()

    with open(fichier_csv, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)

        for row in reader:
            nom = row.get('nom')
            email = row.get('email')
            description_originale = row.get('description')
            id_motif = row.get('id_motif', 1)
            date_reclamation = row.get('date_reclamation', datetime.now().strftime('%Y-%m-%d'))
            description_anglaise = GoogleTranslator(source='auto', target='en').translate(description_originale)

            try:
                langue_detectee = detect(description_originale)
            except:
                langue_detectee = 'fr'

            if langue_detectee != 'fr':
                description_traduite = GoogleTranslator(source='auto', target='fr').translate(description_originale)
            else:
                description_traduite = description_originale

            cursor.execute("SELECT id FROM utilisateurs WHERE email = ?", (email,))
            utilisateur = cursor.fetchone()

            if utilisateur:
                id_utilisateur = utilisateur[0]
            else:
                cursor.execute("INSERT INTO utilisateurs (nom, email) VALUES (?, ?)", (nom, email))
                id_utilisateur = cursor.lastrowid

            sentiment_label,compound_score = analyser_sentiment(description_anglaise)

            cursor.execute('''
                INSERT INTO reclamations (id_utilisateur, id_motif, description, date_reclamation, langue_origine, description_originale, sentiment,compound_score)
                VALUES (?, ?, ?, ?, ?, ?, ?,?)
            ''', (id_utilisateur, id_motif, description_traduite, date_reclamation, langue_detectee, description_originale, sentiment_label,compound_score))

    conn.commit()
    conn.close()
    print("Import CSV termin√© avec succ√®s.")

if __name__ == '__main__':
    app.run(debug=True)
